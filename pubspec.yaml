name: system_state
description: |
  The **SystemState** plugin for Flutter provides access to essential Android device states and controls. With this plugin, you can monitor and control **Battery**, **Wi-Fi**, **Mobile Data**, and **Volume** functionalities. Perfect for apps that need device management or real-time system updates.

  Key features:
  - **Mobile Data State Monitoring and Control**: 
    - Check if mobile data is enabled.
    - Retrieve SIM operator name, network operator, and network type (e.g., 4G, 5G).
    - Listen to mobile data state changes.
  - **Wi-Fi State Monitoring and Control**: 
    - Check if Wi-Fi is enabled or connected.
    - Retrieve connected Wi-Fi name (`connectedWifiName`).
    - Enable or disable Wi-Fi.
    - Listen to Wi-Fi state changes.
  - **Battery State Monitoring**: 
    - Monitor battery level, temperature, and charging status.
    - Listen to battery state changes.
  - **Volume Control**: 
    - Get and set the system volume.
    - Listen to volume changes.

  **Note**: Currently, the plugin supports Android only.

tags:
  - flutter
  - mobile data
  - battery control
  - wifi control
  - system state
  - volume control
  - android plugin
  - network operator
  - mobile data state
  - device management

version: 1.2.5
homepage: https://github.com/ShamilPP/system_state

environment:
  sdk: ^3.5.4
  flutter: '>=3.3.0'

dependencies:
  flutter:
    sdk: flutter
  plugin_platform_interface: ^2.0.2

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^4.0.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:
  # This section identifies this Flutter project as a plugin project.
  # The 'pluginClass' specifies the class (in Java, Kotlin, Swift, Objective-C, etc.)
  # which should be registered in the plugin registry. This is required for
  # using method channels.
  # The Android 'package' specifies package in which the registered class is.
  # This is required for using method channels on Android.
  # The 'ffiPlugin' specifies that native code should be built and bundled.
  # This is required for using `dart:ffi`.
  # All these are used by the tooling to maintain consistency when
  # adding or updating assets for this project.
  plugin:
    platforms:
      android:
        package: com.shamil.system_state
        pluginClass: SystemStatePlugin

  # To add assets to your plugin package, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg
  #
  # For details regarding assets in packages, see
  # https://flutter.dev/to/asset-from-package
  #
  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images

  # To add custom fonts to your plugin package, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts in packages, see
  # https://flutter.dev/to/font-from-package
